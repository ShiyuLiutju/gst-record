// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calmcar.prototxt

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "calmcar.prototxt.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CAN_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAN_reflection_ = NULL;
const ::google::protobuf::Descriptor* LaneLineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LaneLineInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalmCarProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalmCarProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_calmcar_2eprototxt() {
  protobuf_AddDesc_calmcar_2eprototxt();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "calmcar.prototxt");
  GOOGLE_CHECK(file != NULL);
  CAN_descriptor_ = file->message_type(0);
  static const int CAN_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAN, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAN, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAN, time_),
  };
  CAN_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAN_descriptor_,
      CAN::default_instance_,
      CAN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAN, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAN));
  LaneLineInfo_descriptor_ = file->message_type(1);
  static const int LaneLineInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneLineInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneLineInfo, rho_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneLineInfo, theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneLineInfo, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneLineInfo, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneLineInfo, c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneLineInfo, start_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneLineInfo, start_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneLineInfo, end_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneLineInfo, end_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneLineInfo, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneLineInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneLineInfo, confidence_),
  };
  LaneLineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LaneLineInfo_descriptor_,
      LaneLineInfo::default_instance_,
      LaneLineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneLineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneLineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LaneLineInfo));
  ObjectAttribute_descriptor_ = file->message_type(2);
  static const int ObjectAttribute_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttribute, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttribute, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttribute, start_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttribute, start_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttribute, image_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttribute, image_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttribute, distance_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttribute, distance_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttribute, releative_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttribute, ttc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttribute, object_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttribute, object_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttribute, thw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttribute, life_time_),
  };
  ObjectAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectAttribute_descriptor_,
      ObjectAttribute::default_instance_,
      ObjectAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectAttribute));
  CalmCarProto_descriptor_ = file->message_type(3);
  static const int CalmCarProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalmCarProto, camera_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalmCarProto, can_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalmCarProto, frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalmCarProto, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalmCarProto, lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalmCarProto, object_),
  };
  CalmCarProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalmCarProto_descriptor_,
      CalmCarProto::default_instance_,
      CalmCarProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalmCarProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalmCarProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalmCarProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_calmcar_2eprototxt);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAN_descriptor_, &CAN::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LaneLineInfo_descriptor_, &LaneLineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectAttribute_descriptor_, &ObjectAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalmCarProto_descriptor_, &CalmCarProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_calmcar_2eprototxt() {
  delete CAN::default_instance_;
  delete CAN_reflection_;
  delete LaneLineInfo::default_instance_;
  delete LaneLineInfo_reflection_;
  delete ObjectAttribute::default_instance_;
  delete ObjectAttribute_reflection_;
  delete CalmCarProto::default_instance_;
  delete CalmCarProto_reflection_;
}

void protobuf_AddDesc_calmcar_2eprototxt() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020calmcar.prototxt\"-\n\003CAN\022\n\n\002ID\030\001 \002(\r\022\014\n"
    "\004data\030\002 \002(\014\022\014\n\004time\030\003 \001(\r\"\310\001\n\014LaneLineIn"
    "fo\022\n\n\002id\030\001 \001(\r\022\013\n\003rho\030\002 \001(\002\022\r\n\005theta\030\003 \001"
    "(\002\022\t\n\001a\030\004 \001(\002\022\t\n\001b\030\005 \001(\002\022\t\n\001c\030\006 \001(\002\022\017\n\007s"
    "tart_x\030\007 \001(\r\022\017\n\007start_y\030\010 \001(\r\022\r\n\005end_x\030\t"
    " \001(\r\022\r\n\005end_y\030\n \001(\r\022\r\n\005color\030\013 \001(\r\022\014\n\004ty"
    "pe\030\014 \001(\r\022\022\n\nconfidence\030\r \001(\002\"\224\002\n\017ObjectA"
    "ttribute\022\n\n\002id\030\001 \001(\004\022\r\n\005label\030\002 \001(\r\022\017\n\007s"
    "tart_x\030\003 \001(\r\022\017\n\007start_y\030\004 \001(\r\022\023\n\013image_w"
    "idth\030\005 \001(\r\022\024\n\014image_height\030\006 \001(\r\022\022\n\ndist"
    "ance_y\030\007 \001(\002\022\022\n\ndistance_x\030\010 \001(\002\022\027\n\017rele"
    "ative_speed\030\t \001(\002\022\013\n\003ttc\030\n \001(\002\022\024\n\014object"
    "_width\030\013 \001(\002\022\025\n\robject_height\030\014 \001(\002\022\013\n\003t"
    "hw\030\r \001(\002\022\021\n\tlife_time\030\016 \001(\r\"\240\001\n\014CalmCarP"
    "roto\022\023\n\013camera_data\030\001 \001(\014\022\026\n\010can_data\030\002 "
    "\003(\0132\004.CAN\022\020\n\010frame_id\030\003 \001(\004\022\022\n\ntime_stam"
    "p\030\004 \001(\004\022\033\n\004lane\030\005 \003(\0132\r.LaneLineInfo\022 \n\006"
    "object\030\006 \003(\0132\020.ObjectAttribute", 710);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "calmcar.prototxt", &protobuf_RegisterTypes);
  CAN::default_instance_ = new CAN();
  LaneLineInfo::default_instance_ = new LaneLineInfo();
  ObjectAttribute::default_instance_ = new ObjectAttribute();
  CalmCarProto::default_instance_ = new CalmCarProto();
  CAN::default_instance_->InitAsDefaultInstance();
  LaneLineInfo::default_instance_->InitAsDefaultInstance();
  ObjectAttribute::default_instance_->InitAsDefaultInstance();
  CalmCarProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_calmcar_2eprototxt);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_calmcar_2eprototxt {
  StaticDescriptorInitializer_calmcar_2eprototxt() {
    protobuf_AddDesc_calmcar_2eprototxt();
  }
} static_descriptor_initializer_calmcar_2eprototxt_;

// ===================================================================

#ifndef _MSC_VER
const int CAN::kIDFieldNumber;
const int CAN::kDataFieldNumber;
const int CAN::kTimeFieldNumber;
#endif  // !_MSC_VER

CAN::CAN()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAN)
}

void CAN::InitAsDefaultInstance() {
}

CAN::CAN(const CAN& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CAN)
}

void CAN::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAN::~CAN() {
  // @@protoc_insertion_point(destructor:CAN)
  SharedDtor();
}

void CAN::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void CAN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAN_descriptor_;
}

const CAN& CAN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_calmcar_2eprototxt();
  return *default_instance_;
}

CAN* CAN::default_instance_ = NULL;

CAN* CAN::New() const {
  return new CAN;
}

void CAN::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CAN*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, time_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CAN)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint32 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CAN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CAN)
  return false;
#undef DO_
}

void CAN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CAN)
  // required uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // optional uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CAN)
}

::google::protobuf::uint8* CAN::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAN)
  // required uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // optional uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAN)
  return target;
}

int CAN::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAN::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAN* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAN*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAN::MergeFrom(const CAN& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAN::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAN::CopyFrom(const CAN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAN::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CAN::Swap(CAN* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(data_, other->data_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAN_descriptor_;
  metadata.reflection = CAN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LaneLineInfo::kIdFieldNumber;
const int LaneLineInfo::kRhoFieldNumber;
const int LaneLineInfo::kThetaFieldNumber;
const int LaneLineInfo::kAFieldNumber;
const int LaneLineInfo::kBFieldNumber;
const int LaneLineInfo::kCFieldNumber;
const int LaneLineInfo::kStartXFieldNumber;
const int LaneLineInfo::kStartYFieldNumber;
const int LaneLineInfo::kEndXFieldNumber;
const int LaneLineInfo::kEndYFieldNumber;
const int LaneLineInfo::kColorFieldNumber;
const int LaneLineInfo::kTypeFieldNumber;
const int LaneLineInfo::kConfidenceFieldNumber;
#endif  // !_MSC_VER

LaneLineInfo::LaneLineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LaneLineInfo)
}

void LaneLineInfo::InitAsDefaultInstance() {
}

LaneLineInfo::LaneLineInfo(const LaneLineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LaneLineInfo)
}

void LaneLineInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  rho_ = 0;
  theta_ = 0;
  a_ = 0;
  b_ = 0;
  c_ = 0;
  start_x_ = 0u;
  start_y_ = 0u;
  end_x_ = 0u;
  end_y_ = 0u;
  color_ = 0u;
  type_ = 0u;
  confidence_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LaneLineInfo::~LaneLineInfo() {
  // @@protoc_insertion_point(destructor:LaneLineInfo)
  SharedDtor();
}

void LaneLineInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LaneLineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneLineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaneLineInfo_descriptor_;
}

const LaneLineInfo& LaneLineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_calmcar_2eprototxt();
  return *default_instance_;
}

LaneLineInfo* LaneLineInfo::default_instance_ = NULL;

LaneLineInfo* LaneLineInfo::New() const {
  return new LaneLineInfo;
}

void LaneLineInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LaneLineInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, start_y_);
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(end_x_, confidence_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LaneLineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LaneLineInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_rho;
        break;
      }

      // optional float rho = 2;
      case 2: {
        if (tag == 21) {
         parse_rho:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rho_)));
          set_has_rho();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_theta;
        break;
      }

      // optional float theta = 3;
      case 3: {
        if (tag == 29) {
         parse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &theta_)));
          set_has_theta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_a;
        break;
      }

      // optional float a = 4;
      case 4: {
        if (tag == 37) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_b;
        break;
      }

      // optional float b = 5;
      case 5: {
        if (tag == 45) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_c;
        break;
      }

      // optional float c = 6;
      case 6: {
        if (tag == 53) {
         parse_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &c_)));
          set_has_c();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_start_x;
        break;
      }

      // optional uint32 start_x = 7;
      case 7: {
        if (tag == 56) {
         parse_start_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_x_)));
          set_has_start_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_start_y;
        break;
      }

      // optional uint32 start_y = 8;
      case 8: {
        if (tag == 64) {
         parse_start_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_y_)));
          set_has_start_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_end_x;
        break;
      }

      // optional uint32 end_x = 9;
      case 9: {
        if (tag == 72) {
         parse_end_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_x_)));
          set_has_end_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_end_y;
        break;
      }

      // optional uint32 end_y = 10;
      case 10: {
        if (tag == 80) {
         parse_end_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_y_)));
          set_has_end_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_color;
        break;
      }

      // optional uint32 color = 11;
      case 11: {
        if (tag == 88) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_type;
        break;
      }

      // optional uint32 type = 12;
      case 12: {
        if (tag == 96) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_confidence;
        break;
      }

      // optional float confidence = 13;
      case 13: {
        if (tag == 109) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
          set_has_confidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LaneLineInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LaneLineInfo)
  return false;
#undef DO_
}

void LaneLineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LaneLineInfo)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional float rho = 2;
  if (has_rho()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->rho(), output);
  }

  // optional float theta = 3;
  if (has_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->theta(), output);
  }

  // optional float a = 4;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->a(), output);
  }

  // optional float b = 5;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->b(), output);
  }

  // optional float c = 6;
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->c(), output);
  }

  // optional uint32 start_x = 7;
  if (has_start_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->start_x(), output);
  }

  // optional uint32 start_y = 8;
  if (has_start_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->start_y(), output);
  }

  // optional uint32 end_x = 9;
  if (has_end_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->end_x(), output);
  }

  // optional uint32 end_y = 10;
  if (has_end_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->end_y(), output);
  }

  // optional uint32 color = 11;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->color(), output);
  }

  // optional uint32 type = 12;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->type(), output);
  }

  // optional float confidence = 13;
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->confidence(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LaneLineInfo)
}

::google::protobuf::uint8* LaneLineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LaneLineInfo)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional float rho = 2;
  if (has_rho()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->rho(), target);
  }

  // optional float theta = 3;
  if (has_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->theta(), target);
  }

  // optional float a = 4;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->a(), target);
  }

  // optional float b = 5;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->b(), target);
  }

  // optional float c = 6;
  if (has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->c(), target);
  }

  // optional uint32 start_x = 7;
  if (has_start_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->start_x(), target);
  }

  // optional uint32 start_y = 8;
  if (has_start_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->start_y(), target);
  }

  // optional uint32 end_x = 9;
  if (has_end_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->end_x(), target);
  }

  // optional uint32 end_y = 10;
  if (has_end_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->end_y(), target);
  }

  // optional uint32 color = 11;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->color(), target);
  }

  // optional uint32 type = 12;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->type(), target);
  }

  // optional float confidence = 13;
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->confidence(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LaneLineInfo)
  return target;
}

int LaneLineInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional float rho = 2;
    if (has_rho()) {
      total_size += 1 + 4;
    }

    // optional float theta = 3;
    if (has_theta()) {
      total_size += 1 + 4;
    }

    // optional float a = 4;
    if (has_a()) {
      total_size += 1 + 4;
    }

    // optional float b = 5;
    if (has_b()) {
      total_size += 1 + 4;
    }

    // optional float c = 6;
    if (has_c()) {
      total_size += 1 + 4;
    }

    // optional uint32 start_x = 7;
    if (has_start_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_x());
    }

    // optional uint32 start_y = 8;
    if (has_start_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_y());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 end_x = 9;
    if (has_end_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_x());
    }

    // optional uint32 end_y = 10;
    if (has_end_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_y());
    }

    // optional uint32 color = 11;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // optional uint32 type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional float confidence = 13;
    if (has_confidence()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneLineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LaneLineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LaneLineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LaneLineInfo::MergeFrom(const LaneLineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rho()) {
      set_rho(from.rho());
    }
    if (from.has_theta()) {
      set_theta(from.theta());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_c()) {
      set_c(from.c());
    }
    if (from.has_start_x()) {
      set_start_x(from.start_x());
    }
    if (from.has_start_y()) {
      set_start_y(from.start_y());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_end_x()) {
      set_end_x(from.end_x());
    }
    if (from.has_end_y()) {
      set_end_y(from.end_y());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LaneLineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneLineInfo::CopyFrom(const LaneLineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneLineInfo::IsInitialized() const {

  return true;
}

void LaneLineInfo::Swap(LaneLineInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rho_, other->rho_);
    std::swap(theta_, other->theta_);
    std::swap(a_, other->a_);
    std::swap(b_, other->b_);
    std::swap(c_, other->c_);
    std::swap(start_x_, other->start_x_);
    std::swap(start_y_, other->start_y_);
    std::swap(end_x_, other->end_x_);
    std::swap(end_y_, other->end_y_);
    std::swap(color_, other->color_);
    std::swap(type_, other->type_);
    std::swap(confidence_, other->confidence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LaneLineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LaneLineInfo_descriptor_;
  metadata.reflection = LaneLineInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectAttribute::kIdFieldNumber;
const int ObjectAttribute::kLabelFieldNumber;
const int ObjectAttribute::kStartXFieldNumber;
const int ObjectAttribute::kStartYFieldNumber;
const int ObjectAttribute::kImageWidthFieldNumber;
const int ObjectAttribute::kImageHeightFieldNumber;
const int ObjectAttribute::kDistanceYFieldNumber;
const int ObjectAttribute::kDistanceXFieldNumber;
const int ObjectAttribute::kReleativeSpeedFieldNumber;
const int ObjectAttribute::kTtcFieldNumber;
const int ObjectAttribute::kObjectWidthFieldNumber;
const int ObjectAttribute::kObjectHeightFieldNumber;
const int ObjectAttribute::kThwFieldNumber;
const int ObjectAttribute::kLifeTimeFieldNumber;
#endif  // !_MSC_VER

ObjectAttribute::ObjectAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ObjectAttribute)
}

void ObjectAttribute::InitAsDefaultInstance() {
}

ObjectAttribute::ObjectAttribute(const ObjectAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ObjectAttribute)
}

void ObjectAttribute::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  label_ = 0u;
  start_x_ = 0u;
  start_y_ = 0u;
  image_width_ = 0u;
  image_height_ = 0u;
  distance_y_ = 0;
  distance_x_ = 0;
  releative_speed_ = 0;
  ttc_ = 0;
  object_width_ = 0;
  object_height_ = 0;
  thw_ = 0;
  life_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectAttribute::~ObjectAttribute() {
  // @@protoc_insertion_point(destructor:ObjectAttribute)
  SharedDtor();
}

void ObjectAttribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectAttribute_descriptor_;
}

const ObjectAttribute& ObjectAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_calmcar_2eprototxt();
  return *default_instance_;
}

ObjectAttribute* ObjectAttribute::default_instance_ = NULL;

ObjectAttribute* ObjectAttribute::New() const {
  return new ObjectAttribute;
}

void ObjectAttribute::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ObjectAttribute*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, distance_x_);
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(releative_speed_, life_time_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ObjectAttribute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_label;
        break;
      }

      // optional uint32 label = 2;
      case 2: {
        if (tag == 16) {
         parse_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &label_)));
          set_has_label();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_start_x;
        break;
      }

      // optional uint32 start_x = 3;
      case 3: {
        if (tag == 24) {
         parse_start_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_x_)));
          set_has_start_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_start_y;
        break;
      }

      // optional uint32 start_y = 4;
      case 4: {
        if (tag == 32) {
         parse_start_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_y_)));
          set_has_start_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_image_width;
        break;
      }

      // optional uint32 image_width = 5;
      case 5: {
        if (tag == 40) {
         parse_image_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &image_width_)));
          set_has_image_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_image_height;
        break;
      }

      // optional uint32 image_height = 6;
      case 6: {
        if (tag == 48) {
         parse_image_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &image_height_)));
          set_has_image_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_distance_y;
        break;
      }

      // optional float distance_y = 7;
      case 7: {
        if (tag == 61) {
         parse_distance_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_y_)));
          set_has_distance_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_distance_x;
        break;
      }

      // optional float distance_x = 8;
      case 8: {
        if (tag == 69) {
         parse_distance_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_x_)));
          set_has_distance_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_releative_speed;
        break;
      }

      // optional float releative_speed = 9;
      case 9: {
        if (tag == 77) {
         parse_releative_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &releative_speed_)));
          set_has_releative_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_ttc;
        break;
      }

      // optional float ttc = 10;
      case 10: {
        if (tag == 85) {
         parse_ttc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ttc_)));
          set_has_ttc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_object_width;
        break;
      }

      // optional float object_width = 11;
      case 11: {
        if (tag == 93) {
         parse_object_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_width_)));
          set_has_object_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_object_height;
        break;
      }

      // optional float object_height = 12;
      case 12: {
        if (tag == 101) {
         parse_object_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_height_)));
          set_has_object_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_thw;
        break;
      }

      // optional float thw = 13;
      case 13: {
        if (tag == 109) {
         parse_thw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thw_)));
          set_has_thw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_life_time;
        break;
      }

      // optional uint32 life_time = 14;
      case 14: {
        if (tag == 112) {
         parse_life_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &life_time_)));
          set_has_life_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ObjectAttribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ObjectAttribute)
  return false;
#undef DO_
}

void ObjectAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ObjectAttribute)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->label(), output);
  }

  // optional uint32 start_x = 3;
  if (has_start_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->start_x(), output);
  }

  // optional uint32 start_y = 4;
  if (has_start_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_y(), output);
  }

  // optional uint32 image_width = 5;
  if (has_image_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->image_width(), output);
  }

  // optional uint32 image_height = 6;
  if (has_image_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->image_height(), output);
  }

  // optional float distance_y = 7;
  if (has_distance_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->distance_y(), output);
  }

  // optional float distance_x = 8;
  if (has_distance_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->distance_x(), output);
  }

  // optional float releative_speed = 9;
  if (has_releative_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->releative_speed(), output);
  }

  // optional float ttc = 10;
  if (has_ttc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->ttc(), output);
  }

  // optional float object_width = 11;
  if (has_object_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->object_width(), output);
  }

  // optional float object_height = 12;
  if (has_object_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->object_height(), output);
  }

  // optional float thw = 13;
  if (has_thw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->thw(), output);
  }

  // optional uint32 life_time = 14;
  if (has_life_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->life_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ObjectAttribute)
}

::google::protobuf::uint8* ObjectAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ObjectAttribute)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 label = 2;
  if (has_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->label(), target);
  }

  // optional uint32 start_x = 3;
  if (has_start_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->start_x(), target);
  }

  // optional uint32 start_y = 4;
  if (has_start_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_y(), target);
  }

  // optional uint32 image_width = 5;
  if (has_image_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->image_width(), target);
  }

  // optional uint32 image_height = 6;
  if (has_image_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->image_height(), target);
  }

  // optional float distance_y = 7;
  if (has_distance_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->distance_y(), target);
  }

  // optional float distance_x = 8;
  if (has_distance_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->distance_x(), target);
  }

  // optional float releative_speed = 9;
  if (has_releative_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->releative_speed(), target);
  }

  // optional float ttc = 10;
  if (has_ttc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->ttc(), target);
  }

  // optional float object_width = 11;
  if (has_object_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->object_width(), target);
  }

  // optional float object_height = 12;
  if (has_object_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->object_height(), target);
  }

  // optional float thw = 13;
  if (has_thw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->thw(), target);
  }

  // optional uint32 life_time = 14;
  if (has_life_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->life_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ObjectAttribute)
  return target;
}

int ObjectAttribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->label());
    }

    // optional uint32 start_x = 3;
    if (has_start_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_x());
    }

    // optional uint32 start_y = 4;
    if (has_start_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_y());
    }

    // optional uint32 image_width = 5;
    if (has_image_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->image_width());
    }

    // optional uint32 image_height = 6;
    if (has_image_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->image_height());
    }

    // optional float distance_y = 7;
    if (has_distance_y()) {
      total_size += 1 + 4;
    }

    // optional float distance_x = 8;
    if (has_distance_x()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float releative_speed = 9;
    if (has_releative_speed()) {
      total_size += 1 + 4;
    }

    // optional float ttc = 10;
    if (has_ttc()) {
      total_size += 1 + 4;
    }

    // optional float object_width = 11;
    if (has_object_width()) {
      total_size += 1 + 4;
    }

    // optional float object_height = 12;
    if (has_object_height()) {
      total_size += 1 + 4;
    }

    // optional float thw = 13;
    if (has_thw()) {
      total_size += 1 + 4;
    }

    // optional uint32 life_time = 14;
    if (has_life_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->life_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectAttribute::MergeFrom(const ObjectAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_start_x()) {
      set_start_x(from.start_x());
    }
    if (from.has_start_y()) {
      set_start_y(from.start_y());
    }
    if (from.has_image_width()) {
      set_image_width(from.image_width());
    }
    if (from.has_image_height()) {
      set_image_height(from.image_height());
    }
    if (from.has_distance_y()) {
      set_distance_y(from.distance_y());
    }
    if (from.has_distance_x()) {
      set_distance_x(from.distance_x());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_releative_speed()) {
      set_releative_speed(from.releative_speed());
    }
    if (from.has_ttc()) {
      set_ttc(from.ttc());
    }
    if (from.has_object_width()) {
      set_object_width(from.object_width());
    }
    if (from.has_object_height()) {
      set_object_height(from.object_height());
    }
    if (from.has_thw()) {
      set_thw(from.thw());
    }
    if (from.has_life_time()) {
      set_life_time(from.life_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAttribute::CopyFrom(const ObjectAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAttribute::IsInitialized() const {

  return true;
}

void ObjectAttribute::Swap(ObjectAttribute* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(label_, other->label_);
    std::swap(start_x_, other->start_x_);
    std::swap(start_y_, other->start_y_);
    std::swap(image_width_, other->image_width_);
    std::swap(image_height_, other->image_height_);
    std::swap(distance_y_, other->distance_y_);
    std::swap(distance_x_, other->distance_x_);
    std::swap(releative_speed_, other->releative_speed_);
    std::swap(ttc_, other->ttc_);
    std::swap(object_width_, other->object_width_);
    std::swap(object_height_, other->object_height_);
    std::swap(thw_, other->thw_);
    std::swap(life_time_, other->life_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectAttribute_descriptor_;
  metadata.reflection = ObjectAttribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CalmCarProto::kCameraDataFieldNumber;
const int CalmCarProto::kCanDataFieldNumber;
const int CalmCarProto::kFrameIdFieldNumber;
const int CalmCarProto::kTimeStampFieldNumber;
const int CalmCarProto::kLaneFieldNumber;
const int CalmCarProto::kObjectFieldNumber;
#endif  // !_MSC_VER

CalmCarProto::CalmCarProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CalmCarProto)
}

void CalmCarProto::InitAsDefaultInstance() {
}

CalmCarProto::CalmCarProto(const CalmCarProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CalmCarProto)
}

void CalmCarProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  camera_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frame_id_ = GOOGLE_ULONGLONG(0);
  time_stamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalmCarProto::~CalmCarProto() {
  // @@protoc_insertion_point(destructor:CalmCarProto)
  SharedDtor();
}

void CalmCarProto::SharedDtor() {
  if (camera_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete camera_data_;
  }
  if (this != default_instance_) {
  }
}

void CalmCarProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalmCarProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalmCarProto_descriptor_;
}

const CalmCarProto& CalmCarProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_calmcar_2eprototxt();
  return *default_instance_;
}

CalmCarProto* CalmCarProto::default_instance_ = NULL;

CalmCarProto* CalmCarProto::New() const {
  return new CalmCarProto;
}

void CalmCarProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CalmCarProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(frame_id_, time_stamp_);
    if (has_camera_data()) {
      if (camera_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        camera_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  can_data_.Clear();
  lane_.Clear();
  object_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalmCarProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CalmCarProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes camera_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_camera_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_can_data;
        break;
      }

      // repeated .CAN can_data = 2;
      case 2: {
        if (tag == 18) {
         parse_can_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_can_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_can_data;
        if (input->ExpectTag(24)) goto parse_frame_id;
        break;
      }

      // optional uint64 frame_id = 3;
      case 3: {
        if (tag == 24) {
         parse_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frame_id_)));
          set_has_frame_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time_stamp;
        break;
      }

      // optional uint64 time_stamp = 4;
      case 4: {
        if (tag == 32) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_lane;
        break;
      }

      // repeated .LaneLineInfo lane = 5;
      case 5: {
        if (tag == 42) {
         parse_lane:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_lane;
        if (input->ExpectTag(50)) goto parse_object;
        break;
      }

      // repeated .ObjectAttribute object = 6;
      case 6: {
        if (tag == 50) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_object()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_object;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CalmCarProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CalmCarProto)
  return false;
#undef DO_
}

void CalmCarProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CalmCarProto)
  // optional bytes camera_data = 1;
  if (has_camera_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->camera_data(), output);
  }

  // repeated .CAN can_data = 2;
  for (int i = 0; i < this->can_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->can_data(i), output);
  }

  // optional uint64 frame_id = 3;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->frame_id(), output);
  }

  // optional uint64 time_stamp = 4;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time_stamp(), output);
  }

  // repeated .LaneLineInfo lane = 5;
  for (int i = 0; i < this->lane_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->lane(i), output);
  }

  // repeated .ObjectAttribute object = 6;
  for (int i = 0; i < this->object_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->object(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CalmCarProto)
}

::google::protobuf::uint8* CalmCarProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CalmCarProto)
  // optional bytes camera_data = 1;
  if (has_camera_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->camera_data(), target);
  }

  // repeated .CAN can_data = 2;
  for (int i = 0; i < this->can_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->can_data(i), target);
  }

  // optional uint64 frame_id = 3;
  if (has_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->frame_id(), target);
  }

  // optional uint64 time_stamp = 4;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time_stamp(), target);
  }

  // repeated .LaneLineInfo lane = 5;
  for (int i = 0; i < this->lane_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->lane(i), target);
  }

  // repeated .ObjectAttribute object = 6;
  for (int i = 0; i < this->object_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->object(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CalmCarProto)
  return target;
}

int CalmCarProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes camera_data = 1;
    if (has_camera_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->camera_data());
    }

    // optional uint64 frame_id = 3;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->frame_id());
    }

    // optional uint64 time_stamp = 4;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_stamp());
    }

  }
  // repeated .CAN can_data = 2;
  total_size += 1 * this->can_data_size();
  for (int i = 0; i < this->can_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->can_data(i));
  }

  // repeated .LaneLineInfo lane = 5;
  total_size += 1 * this->lane_size();
  for (int i = 0; i < this->lane_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lane(i));
  }

  // repeated .ObjectAttribute object = 6;
  total_size += 1 * this->object_size();
  for (int i = 0; i < this->object_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->object(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalmCarProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalmCarProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalmCarProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalmCarProto::MergeFrom(const CalmCarProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  can_data_.MergeFrom(from.can_data_);
  lane_.MergeFrom(from.lane_);
  object_.MergeFrom(from.object_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camera_data()) {
      set_camera_data(from.camera_data());
    }
    if (from.has_frame_id()) {
      set_frame_id(from.frame_id());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalmCarProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalmCarProto::CopyFrom(const CalmCarProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalmCarProto::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->can_data())) return false;
  return true;
}

void CalmCarProto::Swap(CalmCarProto* other) {
  if (other != this) {
    std::swap(camera_data_, other->camera_data_);
    can_data_.Swap(&other->can_data_);
    std::swap(frame_id_, other->frame_id_);
    std::swap(time_stamp_, other->time_stamp_);
    lane_.Swap(&other->lane_);
    object_.Swap(&other->object_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalmCarProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalmCarProto_descriptor_;
  metadata.reflection = CalmCarProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
