// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calmcar.prototxt

#ifndef PROTOBUF_calmcar_2eprototxt__INCLUDED
#define PROTOBUF_calmcar_2eprototxt__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_calmcar_2eprototxt();
void protobuf_AssignDesc_calmcar_2eprototxt();
void protobuf_ShutdownFile_calmcar_2eprototxt();

class CAN;
class LaneLineInfo;
class ObjectAttribute;
class CalmCarProto;

// ===================================================================

class CAN : public ::google::protobuf::Message {
 public:
  CAN();
  virtual ~CAN();

  CAN(const CAN& from);

  inline CAN& operator=(const CAN& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAN& default_instance();

  void Swap(CAN* other);

  // implements Message ----------------------------------------------

  CAN* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAN& from);
  void MergeFrom(const CAN& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CAN)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* data_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_calmcar_2eprototxt();
  friend void protobuf_AssignDesc_calmcar_2eprototxt();
  friend void protobuf_ShutdownFile_calmcar_2eprototxt();

  void InitAsDefaultInstance();
  static CAN* default_instance_;
};
// -------------------------------------------------------------------

class LaneLineInfo : public ::google::protobuf::Message {
 public:
  LaneLineInfo();
  virtual ~LaneLineInfo();

  LaneLineInfo(const LaneLineInfo& from);

  inline LaneLineInfo& operator=(const LaneLineInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneLineInfo& default_instance();

  void Swap(LaneLineInfo* other);

  // implements Message ----------------------------------------------

  LaneLineInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LaneLineInfo& from);
  void MergeFrom(const LaneLineInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional float rho = 2;
  inline bool has_rho() const;
  inline void clear_rho();
  static const int kRhoFieldNumber = 2;
  inline float rho() const;
  inline void set_rho(float value);

  // optional float theta = 3;
  inline bool has_theta() const;
  inline void clear_theta();
  static const int kThetaFieldNumber = 3;
  inline float theta() const;
  inline void set_theta(float value);

  // optional float a = 4;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 4;
  inline float a() const;
  inline void set_a(float value);

  // optional float b = 5;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 5;
  inline float b() const;
  inline void set_b(float value);

  // optional float c = 6;
  inline bool has_c() const;
  inline void clear_c();
  static const int kCFieldNumber = 6;
  inline float c() const;
  inline void set_c(float value);

  // optional uint32 start_x = 7;
  inline bool has_start_x() const;
  inline void clear_start_x();
  static const int kStartXFieldNumber = 7;
  inline ::google::protobuf::uint32 start_x() const;
  inline void set_start_x(::google::protobuf::uint32 value);

  // optional uint32 start_y = 8;
  inline bool has_start_y() const;
  inline void clear_start_y();
  static const int kStartYFieldNumber = 8;
  inline ::google::protobuf::uint32 start_y() const;
  inline void set_start_y(::google::protobuf::uint32 value);

  // optional uint32 end_x = 9;
  inline bool has_end_x() const;
  inline void clear_end_x();
  static const int kEndXFieldNumber = 9;
  inline ::google::protobuf::uint32 end_x() const;
  inline void set_end_x(::google::protobuf::uint32 value);

  // optional uint32 end_y = 10;
  inline bool has_end_y() const;
  inline void clear_end_y();
  static const int kEndYFieldNumber = 10;
  inline ::google::protobuf::uint32 end_y() const;
  inline void set_end_y(::google::protobuf::uint32 value);

  // optional uint32 color = 11;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 11;
  inline ::google::protobuf::uint32 color() const;
  inline void set_color(::google::protobuf::uint32 value);

  // optional uint32 type = 12;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 12;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional float confidence = 13;
  inline bool has_confidence() const;
  inline void clear_confidence();
  static const int kConfidenceFieldNumber = 13;
  inline float confidence() const;
  inline void set_confidence(float value);

  // @@protoc_insertion_point(class_scope:LaneLineInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_rho();
  inline void clear_has_rho();
  inline void set_has_theta();
  inline void clear_has_theta();
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_c();
  inline void clear_has_c();
  inline void set_has_start_x();
  inline void clear_has_start_x();
  inline void set_has_start_y();
  inline void clear_has_start_y();
  inline void set_has_end_x();
  inline void clear_has_end_x();
  inline void set_has_end_y();
  inline void clear_has_end_y();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_confidence();
  inline void clear_has_confidence();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  float rho_;
  float theta_;
  float a_;
  float b_;
  float c_;
  ::google::protobuf::uint32 start_x_;
  ::google::protobuf::uint32 start_y_;
  ::google::protobuf::uint32 end_x_;
  ::google::protobuf::uint32 end_y_;
  ::google::protobuf::uint32 color_;
  ::google::protobuf::uint32 type_;
  float confidence_;
  friend void  protobuf_AddDesc_calmcar_2eprototxt();
  friend void protobuf_AssignDesc_calmcar_2eprototxt();
  friend void protobuf_ShutdownFile_calmcar_2eprototxt();

  void InitAsDefaultInstance();
  static LaneLineInfo* default_instance_;
};
// -------------------------------------------------------------------

class ObjectAttribute : public ::google::protobuf::Message {
 public:
  ObjectAttribute();
  virtual ~ObjectAttribute();

  ObjectAttribute(const ObjectAttribute& from);

  inline ObjectAttribute& operator=(const ObjectAttribute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectAttribute& default_instance();

  void Swap(ObjectAttribute* other);

  // implements Message ----------------------------------------------

  ObjectAttribute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectAttribute& from);
  void MergeFrom(const ObjectAttribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint32 label = 2;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 2;
  inline ::google::protobuf::uint32 label() const;
  inline void set_label(::google::protobuf::uint32 value);

  // optional uint32 start_x = 3;
  inline bool has_start_x() const;
  inline void clear_start_x();
  static const int kStartXFieldNumber = 3;
  inline ::google::protobuf::uint32 start_x() const;
  inline void set_start_x(::google::protobuf::uint32 value);

  // optional uint32 start_y = 4;
  inline bool has_start_y() const;
  inline void clear_start_y();
  static const int kStartYFieldNumber = 4;
  inline ::google::protobuf::uint32 start_y() const;
  inline void set_start_y(::google::protobuf::uint32 value);

  // optional uint32 image_width = 5;
  inline bool has_image_width() const;
  inline void clear_image_width();
  static const int kImageWidthFieldNumber = 5;
  inline ::google::protobuf::uint32 image_width() const;
  inline void set_image_width(::google::protobuf::uint32 value);

  // optional uint32 image_height = 6;
  inline bool has_image_height() const;
  inline void clear_image_height();
  static const int kImageHeightFieldNumber = 6;
  inline ::google::protobuf::uint32 image_height() const;
  inline void set_image_height(::google::protobuf::uint32 value);

  // optional float distance_y = 7;
  inline bool has_distance_y() const;
  inline void clear_distance_y();
  static const int kDistanceYFieldNumber = 7;
  inline float distance_y() const;
  inline void set_distance_y(float value);

  // optional float distance_x = 8;
  inline bool has_distance_x() const;
  inline void clear_distance_x();
  static const int kDistanceXFieldNumber = 8;
  inline float distance_x() const;
  inline void set_distance_x(float value);

  // optional float releative_speed = 9;
  inline bool has_releative_speed() const;
  inline void clear_releative_speed();
  static const int kReleativeSpeedFieldNumber = 9;
  inline float releative_speed() const;
  inline void set_releative_speed(float value);

  // optional float ttc = 10;
  inline bool has_ttc() const;
  inline void clear_ttc();
  static const int kTtcFieldNumber = 10;
  inline float ttc() const;
  inline void set_ttc(float value);

  // optional float object_width = 11;
  inline bool has_object_width() const;
  inline void clear_object_width();
  static const int kObjectWidthFieldNumber = 11;
  inline float object_width() const;
  inline void set_object_width(float value);

  // optional float object_height = 12;
  inline bool has_object_height() const;
  inline void clear_object_height();
  static const int kObjectHeightFieldNumber = 12;
  inline float object_height() const;
  inline void set_object_height(float value);

  // optional float thw = 13;
  inline bool has_thw() const;
  inline void clear_thw();
  static const int kThwFieldNumber = 13;
  inline float thw() const;
  inline void set_thw(float value);

  // optional uint32 life_time = 14;
  inline bool has_life_time() const;
  inline void clear_life_time();
  static const int kLifeTimeFieldNumber = 14;
  inline ::google::protobuf::uint32 life_time() const;
  inline void set_life_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ObjectAttribute)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_start_x();
  inline void clear_has_start_x();
  inline void set_has_start_y();
  inline void clear_has_start_y();
  inline void set_has_image_width();
  inline void clear_has_image_width();
  inline void set_has_image_height();
  inline void clear_has_image_height();
  inline void set_has_distance_y();
  inline void clear_has_distance_y();
  inline void set_has_distance_x();
  inline void clear_has_distance_x();
  inline void set_has_releative_speed();
  inline void clear_has_releative_speed();
  inline void set_has_ttc();
  inline void clear_has_ttc();
  inline void set_has_object_width();
  inline void clear_has_object_width();
  inline void set_has_object_height();
  inline void clear_has_object_height();
  inline void set_has_thw();
  inline void clear_has_thw();
  inline void set_has_life_time();
  inline void clear_has_life_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 label_;
  ::google::protobuf::uint32 start_x_;
  ::google::protobuf::uint32 start_y_;
  ::google::protobuf::uint32 image_width_;
  ::google::protobuf::uint32 image_height_;
  float distance_y_;
  float distance_x_;
  float releative_speed_;
  float ttc_;
  float object_width_;
  float object_height_;
  float thw_;
  ::google::protobuf::uint32 life_time_;
  friend void  protobuf_AddDesc_calmcar_2eprototxt();
  friend void protobuf_AssignDesc_calmcar_2eprototxt();
  friend void protobuf_ShutdownFile_calmcar_2eprototxt();

  void InitAsDefaultInstance();
  static ObjectAttribute* default_instance_;
};
// -------------------------------------------------------------------

class CalmCarProto : public ::google::protobuf::Message {
 public:
  CalmCarProto();
  virtual ~CalmCarProto();

  CalmCarProto(const CalmCarProto& from);

  inline CalmCarProto& operator=(const CalmCarProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CalmCarProto& default_instance();

  void Swap(CalmCarProto* other);

  // implements Message ----------------------------------------------

  CalmCarProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CalmCarProto& from);
  void MergeFrom(const CalmCarProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes camera_data = 1;
  inline bool has_camera_data() const;
  inline void clear_camera_data();
  static const int kCameraDataFieldNumber = 1;
  inline const ::std::string& camera_data() const;
  inline void set_camera_data(const ::std::string& value);
  inline void set_camera_data(const char* value);
  inline void set_camera_data(const void* value, size_t size);
  inline ::std::string* mutable_camera_data();
  inline ::std::string* release_camera_data();
  inline void set_allocated_camera_data(::std::string* camera_data);

  // repeated .CAN can_data = 2;
  inline int can_data_size() const;
  inline void clear_can_data();
  static const int kCanDataFieldNumber = 2;
  inline const ::CAN& can_data(int index) const;
  inline ::CAN* mutable_can_data(int index);
  inline ::CAN* add_can_data();
  inline const ::google::protobuf::RepeatedPtrField< ::CAN >&
      can_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::CAN >*
      mutable_can_data();

  // optional uint64 frame_id = 3;
  inline bool has_frame_id() const;
  inline void clear_frame_id();
  static const int kFrameIdFieldNumber = 3;
  inline ::google::protobuf::uint64 frame_id() const;
  inline void set_frame_id(::google::protobuf::uint64 value);

  // optional uint64 time_stamp = 4;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 4;
  inline ::google::protobuf::uint64 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint64 value);

  // repeated .LaneLineInfo lane = 5;
  inline int lane_size() const;
  inline void clear_lane();
  static const int kLaneFieldNumber = 5;
  inline const ::LaneLineInfo& lane(int index) const;
  inline ::LaneLineInfo* mutable_lane(int index);
  inline ::LaneLineInfo* add_lane();
  inline const ::google::protobuf::RepeatedPtrField< ::LaneLineInfo >&
      lane() const;
  inline ::google::protobuf::RepeatedPtrField< ::LaneLineInfo >*
      mutable_lane();

  // repeated .ObjectAttribute object = 6;
  inline int object_size() const;
  inline void clear_object();
  static const int kObjectFieldNumber = 6;
  inline const ::ObjectAttribute& object(int index) const;
  inline ::ObjectAttribute* mutable_object(int index);
  inline ::ObjectAttribute* add_object();
  inline const ::google::protobuf::RepeatedPtrField< ::ObjectAttribute >&
      object() const;
  inline ::google::protobuf::RepeatedPtrField< ::ObjectAttribute >*
      mutable_object();

  // @@protoc_insertion_point(class_scope:CalmCarProto)
 private:
  inline void set_has_camera_data();
  inline void clear_has_camera_data();
  inline void set_has_frame_id();
  inline void clear_has_frame_id();
  inline void set_has_time_stamp();
  inline void clear_has_time_stamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* camera_data_;
  ::google::protobuf::RepeatedPtrField< ::CAN > can_data_;
  ::google::protobuf::uint64 frame_id_;
  ::google::protobuf::uint64 time_stamp_;
  ::google::protobuf::RepeatedPtrField< ::LaneLineInfo > lane_;
  ::google::protobuf::RepeatedPtrField< ::ObjectAttribute > object_;
  friend void  protobuf_AddDesc_calmcar_2eprototxt();
  friend void protobuf_AssignDesc_calmcar_2eprototxt();
  friend void protobuf_ShutdownFile_calmcar_2eprototxt();

  void InitAsDefaultInstance();
  static CalmCarProto* default_instance_;
};
// ===================================================================


// ===================================================================

// CAN

// required uint32 ID = 1;
inline bool CAN::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAN::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAN::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAN::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CAN::id() const {
  // @@protoc_insertion_point(field_get:CAN.ID)
  return id_;
}
inline void CAN::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CAN.ID)
}

// required bytes data = 2;
inline bool CAN::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAN::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAN::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAN::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& CAN::data() const {
  // @@protoc_insertion_point(field_get:CAN.data)
  return *data_;
}
inline void CAN::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:CAN.data)
}
inline void CAN::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:CAN.data)
}
inline void CAN::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CAN.data)
}
inline ::std::string* CAN::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CAN.data)
  return data_;
}
inline ::std::string* CAN::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CAN::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CAN.data)
}

// optional uint32 time = 3;
inline bool CAN::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CAN::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CAN::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CAN::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 CAN::time() const {
  // @@protoc_insertion_point(field_get:CAN.time)
  return time_;
}
inline void CAN::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:CAN.time)
}

// -------------------------------------------------------------------

// LaneLineInfo

// optional uint32 id = 1;
inline bool LaneLineInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneLineInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneLineInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneLineInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 LaneLineInfo::id() const {
  // @@protoc_insertion_point(field_get:LaneLineInfo.id)
  return id_;
}
inline void LaneLineInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:LaneLineInfo.id)
}

// optional float rho = 2;
inline bool LaneLineInfo::has_rho() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneLineInfo::set_has_rho() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneLineInfo::clear_has_rho() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaneLineInfo::clear_rho() {
  rho_ = 0;
  clear_has_rho();
}
inline float LaneLineInfo::rho() const {
  // @@protoc_insertion_point(field_get:LaneLineInfo.rho)
  return rho_;
}
inline void LaneLineInfo::set_rho(float value) {
  set_has_rho();
  rho_ = value;
  // @@protoc_insertion_point(field_set:LaneLineInfo.rho)
}

// optional float theta = 3;
inline bool LaneLineInfo::has_theta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaneLineInfo::set_has_theta() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaneLineInfo::clear_has_theta() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaneLineInfo::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
inline float LaneLineInfo::theta() const {
  // @@protoc_insertion_point(field_get:LaneLineInfo.theta)
  return theta_;
}
inline void LaneLineInfo::set_theta(float value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:LaneLineInfo.theta)
}

// optional float a = 4;
inline bool LaneLineInfo::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaneLineInfo::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LaneLineInfo::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LaneLineInfo::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline float LaneLineInfo::a() const {
  // @@protoc_insertion_point(field_get:LaneLineInfo.a)
  return a_;
}
inline void LaneLineInfo::set_a(float value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:LaneLineInfo.a)
}

// optional float b = 5;
inline bool LaneLineInfo::has_b() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LaneLineInfo::set_has_b() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LaneLineInfo::clear_has_b() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LaneLineInfo::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline float LaneLineInfo::b() const {
  // @@protoc_insertion_point(field_get:LaneLineInfo.b)
  return b_;
}
inline void LaneLineInfo::set_b(float value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:LaneLineInfo.b)
}

// optional float c = 6;
inline bool LaneLineInfo::has_c() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LaneLineInfo::set_has_c() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LaneLineInfo::clear_has_c() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LaneLineInfo::clear_c() {
  c_ = 0;
  clear_has_c();
}
inline float LaneLineInfo::c() const {
  // @@protoc_insertion_point(field_get:LaneLineInfo.c)
  return c_;
}
inline void LaneLineInfo::set_c(float value) {
  set_has_c();
  c_ = value;
  // @@protoc_insertion_point(field_set:LaneLineInfo.c)
}

// optional uint32 start_x = 7;
inline bool LaneLineInfo::has_start_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LaneLineInfo::set_has_start_x() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LaneLineInfo::clear_has_start_x() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LaneLineInfo::clear_start_x() {
  start_x_ = 0u;
  clear_has_start_x();
}
inline ::google::protobuf::uint32 LaneLineInfo::start_x() const {
  // @@protoc_insertion_point(field_get:LaneLineInfo.start_x)
  return start_x_;
}
inline void LaneLineInfo::set_start_x(::google::protobuf::uint32 value) {
  set_has_start_x();
  start_x_ = value;
  // @@protoc_insertion_point(field_set:LaneLineInfo.start_x)
}

// optional uint32 start_y = 8;
inline bool LaneLineInfo::has_start_y() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LaneLineInfo::set_has_start_y() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LaneLineInfo::clear_has_start_y() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LaneLineInfo::clear_start_y() {
  start_y_ = 0u;
  clear_has_start_y();
}
inline ::google::protobuf::uint32 LaneLineInfo::start_y() const {
  // @@protoc_insertion_point(field_get:LaneLineInfo.start_y)
  return start_y_;
}
inline void LaneLineInfo::set_start_y(::google::protobuf::uint32 value) {
  set_has_start_y();
  start_y_ = value;
  // @@protoc_insertion_point(field_set:LaneLineInfo.start_y)
}

// optional uint32 end_x = 9;
inline bool LaneLineInfo::has_end_x() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LaneLineInfo::set_has_end_x() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LaneLineInfo::clear_has_end_x() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LaneLineInfo::clear_end_x() {
  end_x_ = 0u;
  clear_has_end_x();
}
inline ::google::protobuf::uint32 LaneLineInfo::end_x() const {
  // @@protoc_insertion_point(field_get:LaneLineInfo.end_x)
  return end_x_;
}
inline void LaneLineInfo::set_end_x(::google::protobuf::uint32 value) {
  set_has_end_x();
  end_x_ = value;
  // @@protoc_insertion_point(field_set:LaneLineInfo.end_x)
}

// optional uint32 end_y = 10;
inline bool LaneLineInfo::has_end_y() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LaneLineInfo::set_has_end_y() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LaneLineInfo::clear_has_end_y() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LaneLineInfo::clear_end_y() {
  end_y_ = 0u;
  clear_has_end_y();
}
inline ::google::protobuf::uint32 LaneLineInfo::end_y() const {
  // @@protoc_insertion_point(field_get:LaneLineInfo.end_y)
  return end_y_;
}
inline void LaneLineInfo::set_end_y(::google::protobuf::uint32 value) {
  set_has_end_y();
  end_y_ = value;
  // @@protoc_insertion_point(field_set:LaneLineInfo.end_y)
}

// optional uint32 color = 11;
inline bool LaneLineInfo::has_color() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LaneLineInfo::set_has_color() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LaneLineInfo::clear_has_color() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LaneLineInfo::clear_color() {
  color_ = 0u;
  clear_has_color();
}
inline ::google::protobuf::uint32 LaneLineInfo::color() const {
  // @@protoc_insertion_point(field_get:LaneLineInfo.color)
  return color_;
}
inline void LaneLineInfo::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:LaneLineInfo.color)
}

// optional uint32 type = 12;
inline bool LaneLineInfo::has_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LaneLineInfo::set_has_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LaneLineInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LaneLineInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 LaneLineInfo::type() const {
  // @@protoc_insertion_point(field_get:LaneLineInfo.type)
  return type_;
}
inline void LaneLineInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:LaneLineInfo.type)
}

// optional float confidence = 13;
inline bool LaneLineInfo::has_confidence() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LaneLineInfo::set_has_confidence() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LaneLineInfo::clear_has_confidence() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LaneLineInfo::clear_confidence() {
  confidence_ = 0;
  clear_has_confidence();
}
inline float LaneLineInfo::confidence() const {
  // @@protoc_insertion_point(field_get:LaneLineInfo.confidence)
  return confidence_;
}
inline void LaneLineInfo::set_confidence(float value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:LaneLineInfo.confidence)
}

// -------------------------------------------------------------------

// ObjectAttribute

// optional uint64 id = 1;
inline bool ObjectAttribute::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjectAttribute::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjectAttribute::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObjectAttribute::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 ObjectAttribute::id() const {
  // @@protoc_insertion_point(field_get:ObjectAttribute.id)
  return id_;
}
inline void ObjectAttribute::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ObjectAttribute.id)
}

// optional uint32 label = 2;
inline bool ObjectAttribute::has_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjectAttribute::set_has_label() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObjectAttribute::clear_has_label() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObjectAttribute::clear_label() {
  label_ = 0u;
  clear_has_label();
}
inline ::google::protobuf::uint32 ObjectAttribute::label() const {
  // @@protoc_insertion_point(field_get:ObjectAttribute.label)
  return label_;
}
inline void ObjectAttribute::set_label(::google::protobuf::uint32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:ObjectAttribute.label)
}

// optional uint32 start_x = 3;
inline bool ObjectAttribute::has_start_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObjectAttribute::set_has_start_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObjectAttribute::clear_has_start_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ObjectAttribute::clear_start_x() {
  start_x_ = 0u;
  clear_has_start_x();
}
inline ::google::protobuf::uint32 ObjectAttribute::start_x() const {
  // @@protoc_insertion_point(field_get:ObjectAttribute.start_x)
  return start_x_;
}
inline void ObjectAttribute::set_start_x(::google::protobuf::uint32 value) {
  set_has_start_x();
  start_x_ = value;
  // @@protoc_insertion_point(field_set:ObjectAttribute.start_x)
}

// optional uint32 start_y = 4;
inline bool ObjectAttribute::has_start_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObjectAttribute::set_has_start_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ObjectAttribute::clear_has_start_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ObjectAttribute::clear_start_y() {
  start_y_ = 0u;
  clear_has_start_y();
}
inline ::google::protobuf::uint32 ObjectAttribute::start_y() const {
  // @@protoc_insertion_point(field_get:ObjectAttribute.start_y)
  return start_y_;
}
inline void ObjectAttribute::set_start_y(::google::protobuf::uint32 value) {
  set_has_start_y();
  start_y_ = value;
  // @@protoc_insertion_point(field_set:ObjectAttribute.start_y)
}

// optional uint32 image_width = 5;
inline bool ObjectAttribute::has_image_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ObjectAttribute::set_has_image_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ObjectAttribute::clear_has_image_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ObjectAttribute::clear_image_width() {
  image_width_ = 0u;
  clear_has_image_width();
}
inline ::google::protobuf::uint32 ObjectAttribute::image_width() const {
  // @@protoc_insertion_point(field_get:ObjectAttribute.image_width)
  return image_width_;
}
inline void ObjectAttribute::set_image_width(::google::protobuf::uint32 value) {
  set_has_image_width();
  image_width_ = value;
  // @@protoc_insertion_point(field_set:ObjectAttribute.image_width)
}

// optional uint32 image_height = 6;
inline bool ObjectAttribute::has_image_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ObjectAttribute::set_has_image_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ObjectAttribute::clear_has_image_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ObjectAttribute::clear_image_height() {
  image_height_ = 0u;
  clear_has_image_height();
}
inline ::google::protobuf::uint32 ObjectAttribute::image_height() const {
  // @@protoc_insertion_point(field_get:ObjectAttribute.image_height)
  return image_height_;
}
inline void ObjectAttribute::set_image_height(::google::protobuf::uint32 value) {
  set_has_image_height();
  image_height_ = value;
  // @@protoc_insertion_point(field_set:ObjectAttribute.image_height)
}

// optional float distance_y = 7;
inline bool ObjectAttribute::has_distance_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ObjectAttribute::set_has_distance_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ObjectAttribute::clear_has_distance_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ObjectAttribute::clear_distance_y() {
  distance_y_ = 0;
  clear_has_distance_y();
}
inline float ObjectAttribute::distance_y() const {
  // @@protoc_insertion_point(field_get:ObjectAttribute.distance_y)
  return distance_y_;
}
inline void ObjectAttribute::set_distance_y(float value) {
  set_has_distance_y();
  distance_y_ = value;
  // @@protoc_insertion_point(field_set:ObjectAttribute.distance_y)
}

// optional float distance_x = 8;
inline bool ObjectAttribute::has_distance_x() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ObjectAttribute::set_has_distance_x() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ObjectAttribute::clear_has_distance_x() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ObjectAttribute::clear_distance_x() {
  distance_x_ = 0;
  clear_has_distance_x();
}
inline float ObjectAttribute::distance_x() const {
  // @@protoc_insertion_point(field_get:ObjectAttribute.distance_x)
  return distance_x_;
}
inline void ObjectAttribute::set_distance_x(float value) {
  set_has_distance_x();
  distance_x_ = value;
  // @@protoc_insertion_point(field_set:ObjectAttribute.distance_x)
}

// optional float releative_speed = 9;
inline bool ObjectAttribute::has_releative_speed() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ObjectAttribute::set_has_releative_speed() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ObjectAttribute::clear_has_releative_speed() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ObjectAttribute::clear_releative_speed() {
  releative_speed_ = 0;
  clear_has_releative_speed();
}
inline float ObjectAttribute::releative_speed() const {
  // @@protoc_insertion_point(field_get:ObjectAttribute.releative_speed)
  return releative_speed_;
}
inline void ObjectAttribute::set_releative_speed(float value) {
  set_has_releative_speed();
  releative_speed_ = value;
  // @@protoc_insertion_point(field_set:ObjectAttribute.releative_speed)
}

// optional float ttc = 10;
inline bool ObjectAttribute::has_ttc() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ObjectAttribute::set_has_ttc() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ObjectAttribute::clear_has_ttc() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ObjectAttribute::clear_ttc() {
  ttc_ = 0;
  clear_has_ttc();
}
inline float ObjectAttribute::ttc() const {
  // @@protoc_insertion_point(field_get:ObjectAttribute.ttc)
  return ttc_;
}
inline void ObjectAttribute::set_ttc(float value) {
  set_has_ttc();
  ttc_ = value;
  // @@protoc_insertion_point(field_set:ObjectAttribute.ttc)
}

// optional float object_width = 11;
inline bool ObjectAttribute::has_object_width() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ObjectAttribute::set_has_object_width() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ObjectAttribute::clear_has_object_width() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ObjectAttribute::clear_object_width() {
  object_width_ = 0;
  clear_has_object_width();
}
inline float ObjectAttribute::object_width() const {
  // @@protoc_insertion_point(field_get:ObjectAttribute.object_width)
  return object_width_;
}
inline void ObjectAttribute::set_object_width(float value) {
  set_has_object_width();
  object_width_ = value;
  // @@protoc_insertion_point(field_set:ObjectAttribute.object_width)
}

// optional float object_height = 12;
inline bool ObjectAttribute::has_object_height() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ObjectAttribute::set_has_object_height() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ObjectAttribute::clear_has_object_height() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ObjectAttribute::clear_object_height() {
  object_height_ = 0;
  clear_has_object_height();
}
inline float ObjectAttribute::object_height() const {
  // @@protoc_insertion_point(field_get:ObjectAttribute.object_height)
  return object_height_;
}
inline void ObjectAttribute::set_object_height(float value) {
  set_has_object_height();
  object_height_ = value;
  // @@protoc_insertion_point(field_set:ObjectAttribute.object_height)
}

// optional float thw = 13;
inline bool ObjectAttribute::has_thw() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ObjectAttribute::set_has_thw() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ObjectAttribute::clear_has_thw() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ObjectAttribute::clear_thw() {
  thw_ = 0;
  clear_has_thw();
}
inline float ObjectAttribute::thw() const {
  // @@protoc_insertion_point(field_get:ObjectAttribute.thw)
  return thw_;
}
inline void ObjectAttribute::set_thw(float value) {
  set_has_thw();
  thw_ = value;
  // @@protoc_insertion_point(field_set:ObjectAttribute.thw)
}

// optional uint32 life_time = 14;
inline bool ObjectAttribute::has_life_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ObjectAttribute::set_has_life_time() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ObjectAttribute::clear_has_life_time() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ObjectAttribute::clear_life_time() {
  life_time_ = 0u;
  clear_has_life_time();
}
inline ::google::protobuf::uint32 ObjectAttribute::life_time() const {
  // @@protoc_insertion_point(field_get:ObjectAttribute.life_time)
  return life_time_;
}
inline void ObjectAttribute::set_life_time(::google::protobuf::uint32 value) {
  set_has_life_time();
  life_time_ = value;
  // @@protoc_insertion_point(field_set:ObjectAttribute.life_time)
}

// -------------------------------------------------------------------

// CalmCarProto

// optional bytes camera_data = 1;
inline bool CalmCarProto::has_camera_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CalmCarProto::set_has_camera_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CalmCarProto::clear_has_camera_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CalmCarProto::clear_camera_data() {
  if (camera_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camera_data_->clear();
  }
  clear_has_camera_data();
}
inline const ::std::string& CalmCarProto::camera_data() const {
  // @@protoc_insertion_point(field_get:CalmCarProto.camera_data)
  return *camera_data_;
}
inline void CalmCarProto::set_camera_data(const ::std::string& value) {
  set_has_camera_data();
  if (camera_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camera_data_ = new ::std::string;
  }
  camera_data_->assign(value);
  // @@protoc_insertion_point(field_set:CalmCarProto.camera_data)
}
inline void CalmCarProto::set_camera_data(const char* value) {
  set_has_camera_data();
  if (camera_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camera_data_ = new ::std::string;
  }
  camera_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:CalmCarProto.camera_data)
}
inline void CalmCarProto::set_camera_data(const void* value, size_t size) {
  set_has_camera_data();
  if (camera_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camera_data_ = new ::std::string;
  }
  camera_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CalmCarProto.camera_data)
}
inline ::std::string* CalmCarProto::mutable_camera_data() {
  set_has_camera_data();
  if (camera_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    camera_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CalmCarProto.camera_data)
  return camera_data_;
}
inline ::std::string* CalmCarProto::release_camera_data() {
  clear_has_camera_data();
  if (camera_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = camera_data_;
    camera_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CalmCarProto::set_allocated_camera_data(::std::string* camera_data) {
  if (camera_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete camera_data_;
  }
  if (camera_data) {
    set_has_camera_data();
    camera_data_ = camera_data;
  } else {
    clear_has_camera_data();
    camera_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CalmCarProto.camera_data)
}

// repeated .CAN can_data = 2;
inline int CalmCarProto::can_data_size() const {
  return can_data_.size();
}
inline void CalmCarProto::clear_can_data() {
  can_data_.Clear();
}
inline const ::CAN& CalmCarProto::can_data(int index) const {
  // @@protoc_insertion_point(field_get:CalmCarProto.can_data)
  return can_data_.Get(index);
}
inline ::CAN* CalmCarProto::mutable_can_data(int index) {
  // @@protoc_insertion_point(field_mutable:CalmCarProto.can_data)
  return can_data_.Mutable(index);
}
inline ::CAN* CalmCarProto::add_can_data() {
  // @@protoc_insertion_point(field_add:CalmCarProto.can_data)
  return can_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CAN >&
CalmCarProto::can_data() const {
  // @@protoc_insertion_point(field_list:CalmCarProto.can_data)
  return can_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::CAN >*
CalmCarProto::mutable_can_data() {
  // @@protoc_insertion_point(field_mutable_list:CalmCarProto.can_data)
  return &can_data_;
}

// optional uint64 frame_id = 3;
inline bool CalmCarProto::has_frame_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CalmCarProto::set_has_frame_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CalmCarProto::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CalmCarProto::clear_frame_id() {
  frame_id_ = GOOGLE_ULONGLONG(0);
  clear_has_frame_id();
}
inline ::google::protobuf::uint64 CalmCarProto::frame_id() const {
  // @@protoc_insertion_point(field_get:CalmCarProto.frame_id)
  return frame_id_;
}
inline void CalmCarProto::set_frame_id(::google::protobuf::uint64 value) {
  set_has_frame_id();
  frame_id_ = value;
  // @@protoc_insertion_point(field_set:CalmCarProto.frame_id)
}

// optional uint64 time_stamp = 4;
inline bool CalmCarProto::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CalmCarProto::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CalmCarProto::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CalmCarProto::clear_time_stamp() {
  time_stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_time_stamp();
}
inline ::google::protobuf::uint64 CalmCarProto::time_stamp() const {
  // @@protoc_insertion_point(field_get:CalmCarProto.time_stamp)
  return time_stamp_;
}
inline void CalmCarProto::set_time_stamp(::google::protobuf::uint64 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:CalmCarProto.time_stamp)
}

// repeated .LaneLineInfo lane = 5;
inline int CalmCarProto::lane_size() const {
  return lane_.size();
}
inline void CalmCarProto::clear_lane() {
  lane_.Clear();
}
inline const ::LaneLineInfo& CalmCarProto::lane(int index) const {
  // @@protoc_insertion_point(field_get:CalmCarProto.lane)
  return lane_.Get(index);
}
inline ::LaneLineInfo* CalmCarProto::mutable_lane(int index) {
  // @@protoc_insertion_point(field_mutable:CalmCarProto.lane)
  return lane_.Mutable(index);
}
inline ::LaneLineInfo* CalmCarProto::add_lane() {
  // @@protoc_insertion_point(field_add:CalmCarProto.lane)
  return lane_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::LaneLineInfo >&
CalmCarProto::lane() const {
  // @@protoc_insertion_point(field_list:CalmCarProto.lane)
  return lane_;
}
inline ::google::protobuf::RepeatedPtrField< ::LaneLineInfo >*
CalmCarProto::mutable_lane() {
  // @@protoc_insertion_point(field_mutable_list:CalmCarProto.lane)
  return &lane_;
}

// repeated .ObjectAttribute object = 6;
inline int CalmCarProto::object_size() const {
  return object_.size();
}
inline void CalmCarProto::clear_object() {
  object_.Clear();
}
inline const ::ObjectAttribute& CalmCarProto::object(int index) const {
  // @@protoc_insertion_point(field_get:CalmCarProto.object)
  return object_.Get(index);
}
inline ::ObjectAttribute* CalmCarProto::mutable_object(int index) {
  // @@protoc_insertion_point(field_mutable:CalmCarProto.object)
  return object_.Mutable(index);
}
inline ::ObjectAttribute* CalmCarProto::add_object() {
  // @@protoc_insertion_point(field_add:CalmCarProto.object)
  return object_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ObjectAttribute >&
CalmCarProto::object() const {
  // @@protoc_insertion_point(field_list:CalmCarProto.object)
  return object_;
}
inline ::google::protobuf::RepeatedPtrField< ::ObjectAttribute >*
CalmCarProto::mutable_object() {
  // @@protoc_insertion_point(field_mutable_list:CalmCarProto.object)
  return &object_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_calmcar_2eprototxt__INCLUDED
